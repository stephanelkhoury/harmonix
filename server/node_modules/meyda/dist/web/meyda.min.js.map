{"version":3,"file":"meyda.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../../src/windowing.ts","../../../src/utilities.ts","../../../src/extractors/extractorUtilities.ts","../../../src/extractors/loudness.ts","../../../src/extractors/powerSpectrum.ts","../../../src/extractors/melBands.ts","../../node_modules/dct/src/dct.js","../../../src/featureExtractors.ts","../../../src/extractors/chroma.ts","../../../src/extractors/energy.ts","../../../src/extractors/mfcc.ts","../../../src/extractors/perceptualSharpness.ts","../../../src/extractors/perceptualSpread.ts","../../../src/extractors/rms.ts","../../../src/extractors/spectralCentroid.ts","../../../src/extractors/spectralCrest.ts","../../../src/extractors/spectralFlatness.ts","../../../src/extractors/spectralFlux.ts","../../../src/extractors/spectralKurtosis.ts","../../../src/extractors/spectralRolloff.ts","../../../src/extractors/spectralSkewness.ts","../../../src/extractors/spectralSlope.ts","../../../src/extractors/spectralSpread.ts","../../../src/extractors/zcr.ts","../../node_modules/fftjs/dist/utils.js","../../node_modules/fftjs/dist/fft.js","../../../src/meyda-wa.ts","../../../src/main.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport default {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __createBinding,\r\n    __exportStar,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __spreadArray,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n    __classPrivateFieldIn,\r\n};\r\n","export function blackman(size) {\n  let blackmanBuffer = new Float32Array(size);\n  let coeff1 = (2 * Math.PI) / (size - 1);\n  let coeff2 = 2 * coeff1;\n\n  //According to http://uk.mathworks.com/help/signal/ref/blackman.html\n  //first half of the window\n  for (let i = 0; i < size / 2; i++) {\n    blackmanBuffer[i] =\n      0.42 - 0.5 * Math.cos(i * coeff1) + 0.08 * Math.cos(i * coeff2);\n  }\n\n  //second half of the window\n  for (let i = Math.ceil(size / 2); i > 0; i--) {\n    blackmanBuffer[size - i] = blackmanBuffer[i - 1];\n  }\n\n  return blackmanBuffer;\n}\n\nexport function sine(size) {\n  let coeff = Math.PI / (size - 1);\n  let sineBuffer = new Float32Array(size);\n\n  for (let i = 0; i < size; i++) {\n    sineBuffer[i] = Math.sin(coeff * i);\n  }\n\n  return sineBuffer;\n}\n\nexport function hanning(size) {\n  let hanningBuffer = new Float32Array(size);\n  for (let i = 0; i < size; i++) {\n    // According to the R documentation\n    // http://ugrad.stat.ubc.ca/R/library/e1071/html/hanning.window.html\n    hanningBuffer[i] = 0.5 - 0.5 * Math.cos((2 * Math.PI * i) / (size - 1));\n  }\n\n  return hanningBuffer;\n}\n\nexport function hamming(size) {\n  let hammingBuffer = new Float32Array(size);\n  for (let i = 0; i < size; i++) {\n    //According to http://uk.mathworks.com/help/signal/ref/hamming.html\n    hammingBuffer[i] = 0.54 - 0.46 * Math.cos(2 * Math.PI * (i / size - 1));\n  }\n\n  return hammingBuffer;\n}\n","import * as windowing from \"./windowing\";\n\nlet windows = {};\n\nexport function isPowerOfTwo(num) {\n  while (num % 2 === 0 && num > 1) {\n    num /= 2;\n  }\n\n  return num === 1;\n}\n\nexport function error(message) {\n  throw new Error(\"Meyda: \" + message);\n}\n\nexport function pointwiseBufferMult(a, b) {\n  let c: number[] = [];\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    c[i] = a[i] * b[i];\n  }\n\n  return c;\n}\n\nexport function applyWindow(signal, windowname) {\n  if (windowname !== \"rect\") {\n    if (windowname === \"\" || !windowname) windowname = \"hanning\";\n    if (!windows[windowname]) windows[windowname] = {};\n\n    if (!windows[windowname][signal.length]) {\n      try {\n        windows[windowname][signal.length] = windowing[windowname](\n          signal.length\n        );\n      } catch (e) {\n        throw new Error(\"Invalid windowing function\");\n      }\n    }\n\n    signal = pointwiseBufferMult(signal, windows[windowname][signal.length]);\n  }\n\n  return signal;\n}\n\nexport function createBarkScale(length, sampleRate, bufferSize): Float32Array {\n  let barkScale = new Float32Array(length);\n\n  for (var i = 0; i < barkScale.length; i++) {\n    barkScale[i] = (i * sampleRate) / bufferSize;\n    barkScale[i] =\n      13 * Math.atan(barkScale[i] / 1315.8) +\n      3.5 * Math.atan(Math.pow(barkScale[i] / 7518, 2));\n  }\n\n  return barkScale;\n}\n\nexport function typedToArray(t) {\n  // utility to convert typed arrays to normal arrays\n  return Array.prototype.slice.call(t);\n}\n\nexport function arrayToTyped(t) {\n  // utility to convert arrays to typed F32 arrays\n  return Float32Array.from(t);\n}\n\nexport function _normalize(num, range) {\n  return num / range;\n}\n\nexport function normalize(a, range) {\n  return a.map(function (n) {\n    return _normalize(n, range);\n  });\n}\n\nexport function normalizeToOne(a) {\n  var max = Math.max.apply(null, a);\n\n  return a.map(function (n) {\n    return n / max;\n  });\n}\n\nexport function mean(a) {\n  return (\n    a.reduce(function (prev, cur) {\n      return prev + cur;\n    }) / a.length\n  );\n}\n\nfunction _melToFreq(melValue) {\n  var freqValue = 700 * (Math.exp(melValue / 1125) - 1);\n  return freqValue;\n}\n\nfunction _freqToMel(freqValue) {\n  var melValue = 1125 * Math.log(1 + freqValue / 700);\n  return melValue;\n}\n\nexport function melToFreq(mV) {\n  return _melToFreq(mV);\n}\n\nexport function freqToMel(fV) {\n  return _freqToMel(fV);\n}\n\nexport function createMelFilterBank(\n  numFilters: number,\n  sampleRate: number,\n  bufferSize: number\n): number[][] {\n  //the +2 is the upper and lower limits\n  let melValues = new Float32Array(numFilters + 2);\n  let melValuesInFreq = new Float32Array(numFilters + 2);\n\n  //Generate limits in Hz - from 0 to the nyquist.\n  let lowerLimitFreq = 0;\n  let upperLimitFreq = sampleRate / 2;\n\n  //Convert the limits to Mel\n  let lowerLimitMel = _freqToMel(lowerLimitFreq);\n  let upperLimitMel = _freqToMel(upperLimitFreq);\n\n  //Find the range\n  let range = upperLimitMel - lowerLimitMel;\n\n  //Find the range as part of the linear interpolation\n  let valueToAdd = range / (numFilters + 1);\n\n  let fftBinsOfFreq: number[] = new Array(numFilters + 2);\n\n  for (let i = 0; i < melValues.length; i++) {\n    // Initialising the mel frequencies\n    // They're a linear interpolation between the lower and upper limits.\n    melValues[i] = i * valueToAdd;\n\n    // Convert back to Hz\n    melValuesInFreq[i] = _melToFreq(melValues[i]);\n\n    // Find the corresponding bins\n    fftBinsOfFreq[i] = Math.floor(\n      ((bufferSize + 1) * melValuesInFreq[i]) / sampleRate\n    );\n  }\n\n  var filterBank: number[][] = new Array(numFilters);\n  for (let j = 0; j < filterBank.length; j++) {\n    // Create a two dimensional array of size numFilters * (buffersize/2)+1\n    // pre-populating the arrays with 0s.\n    filterBank[j] = new Array(bufferSize / 2 + 1).fill(0);\n\n    //creating the lower and upper slopes for each bin\n    for (let i = fftBinsOfFreq[j]; i < fftBinsOfFreq[j + 1]; i++) {\n      filterBank[j][i] =\n        (i - fftBinsOfFreq[j]) / (fftBinsOfFreq[j + 1] - fftBinsOfFreq[j]);\n    }\n\n    for (let i = fftBinsOfFreq[j + 1]; i < fftBinsOfFreq[j + 2]; i++) {\n      filterBank[j][i] =\n        (fftBinsOfFreq[j + 2] - i) /\n        (fftBinsOfFreq[j + 2] - fftBinsOfFreq[j + 1]);\n    }\n  }\n\n  return filterBank;\n}\n\nexport function hzToOctaves(freq, A440) {\n  return Math.log2((16 * freq) / A440);\n}\n\nexport function normalizeByColumn(a) {\n  var emptyRow = a[0].map(() => 0);\n  var colDenominators = a\n    .reduce((acc, row) => {\n      row.forEach((cell, j) => {\n        acc[j] += Math.pow(cell, 2);\n      });\n      return acc;\n    }, emptyRow)\n    .map(Math.sqrt);\n  return a.map((row, i) => row.map((v, j) => v / (colDenominators[j] || 1)));\n}\n\nexport function createChromaFilterBank(\n  numFilters,\n  sampleRate,\n  bufferSize,\n  centerOctave = 5,\n  octaveWidth = 2,\n  baseC = true,\n  A440 = 440\n) {\n  var numOutputBins = Math.floor(bufferSize / 2) + 1;\n\n  var frequencyBins = new Array(bufferSize)\n    .fill(0)\n    .map(\n      (_, i) => numFilters * hzToOctaves((sampleRate * i) / bufferSize, A440)\n    );\n\n  // Set a value for the 0 Hz bin that is 1.5 octaves below bin 1\n  // (so chroma is 50% rotated from bin 1, and bin width is broad)\n  frequencyBins[0] = frequencyBins[1] - 1.5 * numFilters;\n\n  var binWidthBins = frequencyBins\n    .slice(1)\n    .map((v, i) => Math.max(v - frequencyBins[i]), 1)\n    .concat([1]);\n\n  var halfNumFilters = Math.round(numFilters / 2);\n\n  var filterPeaks = new Array(numFilters)\n    .fill(0)\n    .map((_, i) =>\n      frequencyBins.map(\n        (frq) =>\n          ((10 * numFilters + halfNumFilters + frq - i) % numFilters) -\n          halfNumFilters\n      )\n    );\n\n  var weights = filterPeaks.map((row, i) =>\n    row.map((_, j) =>\n      Math.exp(-0.5 * Math.pow((2 * filterPeaks[i][j]) / binWidthBins[j], 2))\n    )\n  );\n\n  weights = normalizeByColumn(weights);\n\n  if (octaveWidth) {\n    var octaveWeights = frequencyBins.map((v) =>\n      Math.exp(\n        -0.5 * Math.pow((v / numFilters - centerOctave) / octaveWidth, 2)\n      )\n    );\n    weights = weights.map((row) =>\n      row.map((cell, j) => cell * octaveWeights[j])\n    );\n  }\n\n  if (baseC) {\n    weights = [...weights.slice(3), ...weights.slice(0, 3)];\n  }\n\n  return weights.map((row) => row.slice(0, numOutputBins));\n}\n\nexport function frame(buffer, frameLength, hopLength) {\n  if (buffer.length < frameLength) {\n    throw new Error(\"Buffer is too short for frame length\");\n  }\n  if (hopLength < 1) {\n    throw new Error(\"Hop length cannot be less that 1\");\n  }\n  if (frameLength < 1) {\n    throw new Error(\"Frame length cannot be less that 1\");\n  }\n\n  const numFrames = 1 + Math.floor((buffer.length - frameLength) / hopLength);\n\n  return new Array(numFrames)\n    .fill(0)\n    .map((_, i) => buffer.slice(i * hopLength, i * hopLength + frameLength));\n}\n","export function mu(i: number, amplitudeSpect: Float32Array): number {\n  var numerator = 0;\n  var denominator = 0;\n  for (var k = 0; k < amplitudeSpect.length; k++) {\n    numerator += Math.pow(k, i) * Math.abs(amplitudeSpect[k]);\n    denominator += amplitudeSpect[k];\n  }\n  return numerator / denominator;\n}\n","export default function ({\n  ampSpectrum,\n  barkScale,\n  numberOfBarkBands = 24,\n}: {\n  ampSpectrum: Float32Array;\n  barkScale: Float32Array;\n  numberOfBarkBands?: number;\n}): {\n  specific: Float32Array;\n  total: number;\n} {\n  if (typeof ampSpectrum !== \"object\" || typeof barkScale !== \"object\") {\n    throw new TypeError();\n  }\n\n  var NUM_BARK_BANDS = numberOfBarkBands;\n  var specific = new Float32Array(NUM_BARK_BANDS);\n  var total = 0;\n  var normalisedSpectrum = ampSpectrum;\n  var bbLimits = new Int32Array(NUM_BARK_BANDS + 1);\n\n  bbLimits[0] = 0;\n  var currentBandEnd =\n    barkScale[normalisedSpectrum.length - 1] / NUM_BARK_BANDS;\n  var currentBand = 1;\n  for (let i = 0; i < normalisedSpectrum.length; i++) {\n    while (barkScale[i] > currentBandEnd) {\n      bbLimits[currentBand++] = i;\n      currentBandEnd =\n        (currentBand * barkScale[normalisedSpectrum.length - 1]) /\n        NUM_BARK_BANDS;\n    }\n  }\n\n  bbLimits[NUM_BARK_BANDS] = normalisedSpectrum.length - 1;\n\n  //process\n\n  for (let i = 0; i < NUM_BARK_BANDS; i++) {\n    let sum = 0;\n    for (let j = bbLimits[i]; j < bbLimits[i + 1]; j++) {\n      sum += normalisedSpectrum[j];\n    }\n\n    specific[i] = Math.pow(sum, 0.23);\n  }\n\n  //get total loudness\n  for (let i = 0; i < specific.length; i++) {\n    total += specific[i];\n  }\n\n  return {\n    specific: specific,\n    total: total,\n  };\n}\n","export default function ({\n  ampSpectrum,\n}: {\n  ampSpectrum: Float32Array;\n}): Float32Array {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError();\n  }\n\n  var powerSpectrum = new Float32Array(ampSpectrum.length);\n  for (var i = 0; i < powerSpectrum.length; i++) {\n    powerSpectrum[i] = Math.pow(ampSpectrum[i], 2);\n  }\n\n  return powerSpectrum;\n}\n","import extractPowerSpectrum from \"./powerSpectrum\";\n\nexport default function ({\n  ampSpectrum,\n  melFilterBank,\n  bufferSize,\n}: {\n  ampSpectrum: Float32Array;\n  melFilterBank: number[][];\n  bufferSize: number;\n}): number[] {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError(\"Valid ampSpectrum is required to generate melBands\");\n  }\n  if (typeof melFilterBank !== \"object\") {\n    throw new TypeError(\"Valid melFilterBank is required to generate melBands\");\n  }\n\n  let powSpec = extractPowerSpectrum({ ampSpectrum });\n  let numFilters = melFilterBank.length;\n  let filtered: Float32Array[] = Array(numFilters);\n  let loggedMelBands: Float32Array = new Float32Array(numFilters);\n\n  for (let i = 0; i < loggedMelBands.length; i++) {\n    filtered[i] = new Float32Array(bufferSize / 2);\n    loggedMelBands[i] = 0;\n    for (let j = 0; j < bufferSize / 2; j++) {\n      //point-wise multiplication between power spectrum and filterbanks.\n      filtered[i][j] = melFilterBank[i][j] * powSpec[j];\n\n      //summing up all of the coefficients into one array\n      loggedMelBands[i] += filtered[i][j];\n    }\n\n    //log each coefficient.\n    loggedMelBands[i] = Math.log(loggedMelBands[i] + 1);\n  }\n  return Array.prototype.slice.call(loggedMelBands);\n}\n","/*===========================================================================*\\\n * Discrete Cosine Transform\n *\n * (c) Vail Systems. Joshua Jung and Ben Bryan. 2015\n *\n * This code is not designed to be highly optimized but as an educational\n * tool to understand the Mel-scale and its related coefficients used in\n * human speech analysis.\n\\*===========================================================================*/\nvar cosMap = null;\n\n// Builds a cosine map for the given input size. This allows multiple input sizes to be memoized automagically\n// if you want to run the DCT over and over.\nvar memoizeCosines = function(N) {\n  cosMap = cosMap || {};\n  cosMap[N] = new Array(N*N);\n\n  var PI_N = Math.PI / N;\n\n  for (var k = 0; k < N; k++) {\n    for (var n = 0; n < N; n++) {\n      cosMap[N][n + (k * N)] = Math.cos(PI_N * (n + 0.5) * k);\n    }\n  }\n};\n\nfunction dct(signal, scale) {\n  var L = signal.length;\n  scale = scale || 2;\n\n  if (!cosMap || !cosMap[L]) memoizeCosines(L);\n\n  var coefficients = signal.map(function () {return 0;});\n\n  return coefficients.map(function (__, ix) {\n    return scale * signal.reduce(function (prev, cur, ix_, arr) {\n      return prev + (cur * cosMap[L][ix_ + (ix * L)]);\n    }, 0);\n  });\n};\n\nmodule.exports = dct;\n","import rms from \"./extractors/rms\";\nimport energy from \"./extractors/energy\";\nimport spectralSlope from \"./extractors/spectralSlope\";\nimport spectralCentroid from \"./extractors/spectralCentroid\";\nimport spectralRolloff from \"./extractors/spectralRolloff\";\nimport spectralFlatness from \"./extractors/spectralFlatness\";\nimport spectralSpread from \"./extractors/spectralSpread\";\nimport spectralSkewness from \"./extractors/spectralSkewness\";\nimport spectralKurtosis from \"./extractors/spectralKurtosis\";\nimport zcr from \"./extractors/zcr\";\nimport loudness from \"./extractors/loudness\";\nimport perceptualSpread from \"./extractors/perceptualSpread\";\nimport perceptualSharpness from \"./extractors/perceptualSharpness\";\nimport mfcc from \"./extractors/mfcc\";\nimport chroma from \"./extractors/chroma\";\nimport powerSpectrum from \"./extractors/powerSpectrum\";\nimport spectralFlux from \"./extractors/spectralFlux\";\nimport spectralCrest from \"./extractors/spectralCrest\";\nimport melBands from \"./extractors/melBands\";\n\nlet buffer = function (args) {\n  return args.signal;\n};\n\nlet complexSpectrum = function (args) {\n  return args.complexSpectrum;\n};\n\nlet amplitudeSpectrum = function (args) {\n  return args.ampSpectrum;\n};\n\nexport {\n  buffer,\n  rms,\n  energy,\n  complexSpectrum,\n  spectralSlope,\n  spectralCentroid,\n  spectralRolloff,\n  spectralFlatness,\n  spectralSpread,\n  spectralSkewness,\n  spectralKurtosis,\n  amplitudeSpectrum,\n  zcr,\n  loudness,\n  perceptualSpread,\n  perceptualSharpness,\n  powerSpectrum,\n  mfcc,\n  chroma,\n  spectralFlux,\n  spectralCrest,\n  melBands\n};\n","export default function ({\n  ampSpectrum,\n  chromaFilterBank,\n}: {\n  ampSpectrum: Float32Array;\n  chromaFilterBank: number[][];\n}): number[] {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError(\"Valid ampSpectrum is required to generate chroma\");\n  }\n  if (typeof chromaFilterBank !== \"object\") {\n    throw new TypeError(\n      \"Valid chromaFilterBank is required to generate chroma\"\n    );\n  }\n\n  var chromagram = chromaFilterBank.map((row, i) =>\n    ampSpectrum.reduce((acc, v, j) => acc + v * row[j], 0)\n  );\n  var maxVal = Math.max(...chromagram);\n\n  return maxVal ? chromagram.map((v) => v / maxVal) : chromagram;\n}\n","export default function ({ signal }: { signal: Float32Array }): number {\n  if (typeof signal !== \"object\") {\n    throw new TypeError();\n  }\n\n  var energy = 0;\n  for (var i = 0; i < signal.length; i++) {\n    energy += Math.pow(Math.abs(signal[i]), 2);\n  }\n\n  return energy;\n}\n","import extractMelBands from \"./melBands\";\nimport dct from \"dct\";\n\nexport default function ({\n  ampSpectrum,\n  melFilterBank,\n  numberOfMFCCCoefficients,\n  bufferSize,\n}: {\n  ampSpectrum: Float32Array;\n  melFilterBank: number[][];\n  numberOfMFCCCoefficients: number;\n  bufferSize: number;\n}): number[] {\n  // Tutorial from:\n  // http://practicalcryptography.com/miscellaneous/machine-learning\n  // /guide-mel-frequency-cepstral-coefficients-mfccs/\n  // @ts-ignore\n\n  let _numberOfMFCCCoefficients = Math.min(\n    40,\n    Math.max(1, numberOfMFCCCoefficients || 13)\n  );\n\n  let numFilters = melFilterBank.length;\n  if (numFilters < _numberOfMFCCCoefficients) {\n    throw new Error(\n      \"Insufficient filter bank for requested number of coefficients\"\n    );\n  }\n  const loggedMelBandsArray = extractMelBands({\n    ampSpectrum,\n    melFilterBank,\n    bufferSize,\n  });\n  let mfccs: number[] = dct(loggedMelBandsArray).slice(\n    0,\n    _numberOfMFCCCoefficients\n  );\n\n  return mfccs;\n}\n","import loudness from \"./loudness\";\n\nexport default function ({\n  ampSpectrum,\n  barkScale,\n}: {\n  ampSpectrum: Float32Array;\n  barkScale: Float32Array;\n}): number {\n  var loudnessValue = loudness({ ampSpectrum, barkScale });\n  var spec = loudnessValue.specific;\n  var output = 0;\n\n  for (var i = 0; i < spec.length; i++) {\n    if (i < 15) {\n      output += (i + 1) * spec[i + 1];\n    } else {\n      output += 0.066 * Math.exp(0.171 * (i + 1));\n    }\n  }\n\n  output *= 0.11 / loudnessValue.total;\n\n  return output;\n}\n","import loudness from \"./loudness\";\n\nexport default function ({\n  ampSpectrum,\n  barkScale,\n}: {\n  ampSpectrum: Float32Array;\n  barkScale: Float32Array;\n}): number {\n  var loudnessValue = loudness({ ampSpectrum, barkScale });\n\n  var max = 0;\n  for (var i = 0; i < loudnessValue.specific.length; i++) {\n    if (loudnessValue.specific[i] > max) {\n      max = loudnessValue.specific[i];\n    }\n  }\n\n  var spread = Math.pow((loudnessValue.total - max) / loudnessValue.total, 2);\n\n  return spread;\n}\n","export default function ({ signal }: { signal: Float32Array }): number {\n  // Keeping this bad runtime typecheck for consistency\n  if (typeof signal !== \"object\") {\n    throw new TypeError();\n  }\n\n  var rms = 0;\n  for (var i = 0; i < signal.length; i++) {\n    rms += Math.pow(signal[i], 2);\n  }\n\n  rms = rms / signal.length;\n  rms = Math.sqrt(rms);\n\n  return rms;\n}\n","import { mu } from \"./extractorUtilities\";\n\nexport default function ({\n  ampSpectrum,\n}: {\n  ampSpectrum: Float32Array;\n}): number {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError();\n  }\n\n  return mu(1, ampSpectrum);\n}\n","export default function ({\n  ampSpectrum,\n}: {\n  ampSpectrum: Float32Array;\n}): number {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError();\n  }\n\n  var rms = 0;\n  var peak = -Infinity;\n\n  ampSpectrum.forEach((x) => {\n    rms += Math.pow(x, 2);\n    peak = x > peak ? x : peak;\n  });\n\n  rms = rms / ampSpectrum.length;\n  rms = Math.sqrt(rms);\n\n  return peak / rms;\n}\n","export default function ({\n  ampSpectrum,\n}: {\n  ampSpectrum: Float32Array;\n}): number {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError();\n  }\n\n  var numerator = 0;\n  var denominator = 0;\n  for (var i = 0; i < ampSpectrum.length; i++) {\n    numerator += Math.log(ampSpectrum[i]);\n    denominator += ampSpectrum[i];\n  }\n\n  return (\n    (Math.exp(numerator / ampSpectrum.length) * ampSpectrum.length) /\n    denominator\n  );\n}\n","// This file isn't being typechecked at all because there are major issues with it.\n// See #852 for details. Once that's merged, this file should be typechecked.\n// @ts-nocheck\nexport default function ({\n  signal,\n  previousSignal,\n  bufferSize,\n}: {\n  signal: Float32Array;\n  previousSignal: Float32Array;\n  bufferSize: number;\n}): number {\n  if (typeof signal !== \"object\" || typeof previousSignal != \"object\") {\n    throw new TypeError();\n  }\n\n  let sf = 0;\n  for (let i = -(bufferSize / 2); i < signal.length / 2 - 1; i++) {\n    x = Math.abs(signal[i]) - Math.abs(previousSignal[i]);\n    sf += (x + Math.abs(x)) / 2;\n  }\n\n  return sf;\n}\n","import { mu } from \"./extractorUtilities\";\n\nexport default function ({\n  ampSpectrum,\n}: {\n  ampSpectrum: Float32Array;\n}): number {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError();\n  }\n\n  var ampspec = ampSpectrum;\n  var mu1 = mu(1, ampspec);\n  var mu2 = mu(2, ampspec);\n  var mu3 = mu(3, ampspec);\n  var mu4 = mu(4, ampspec);\n  var numerator = -3 * Math.pow(mu1, 4) + 6 * mu1 * mu2 - 4 * mu1 * mu3 + mu4;\n  var denominator = Math.pow(Math.sqrt(mu2 - Math.pow(mu1, 2)), 4);\n  return numerator / denominator;\n}\n","export default function ({\n  ampSpectrum,\n  sampleRate,\n}: {\n  ampSpectrum: Float32Array;\n  sampleRate: number;\n}): number {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError();\n  }\n\n  var ampspec = ampSpectrum;\n\n  //calculate nyquist bin\n  var nyqBin = sampleRate / (2 * (ampspec.length - 1));\n  var ec = 0;\n  for (var i = 0; i < ampspec.length; i++) {\n    ec += ampspec[i];\n  }\n\n  var threshold = 0.99 * ec;\n  var n = ampspec.length - 1;\n  while (ec > threshold && n >= 0) {\n    ec -= ampspec[n];\n    --n;\n  }\n\n  return (n + 1) * nyqBin;\n}\n","import { mu } from \"./extractorUtilities\";\n\nexport default function ({\n  ampSpectrum,\n}: {\n  ampSpectrum: Float32Array;\n}): number {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError();\n  }\n\n  var mu1 = mu(1, ampSpectrum);\n  var mu2 = mu(2, ampSpectrum);\n  var mu3 = mu(3, ampSpectrum);\n  var numerator = 2 * Math.pow(mu1, 3) - 3 * mu1 * mu2 + mu3;\n  var denominator = Math.pow(Math.sqrt(mu2 - Math.pow(mu1, 2)), 3);\n  return numerator / denominator;\n}\n","export default function ({\n  ampSpectrum,\n  sampleRate,\n  bufferSize,\n}: {\n  ampSpectrum: Float32Array;\n  sampleRate: number;\n  bufferSize: number;\n}): number {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError();\n  }\n\n  //linear regression\n  let ampSum = 0;\n  let freqSum = 0;\n  let freqs = new Float32Array(ampSpectrum.length);\n  let powFreqSum = 0;\n  let ampFreqSum = 0;\n\n  for (var i = 0; i < ampSpectrum.length; i++) {\n    ampSum += ampSpectrum[i];\n    let curFreq = (i * sampleRate) / bufferSize;\n    freqs[i] = curFreq;\n    powFreqSum += curFreq * curFreq;\n    freqSum += curFreq;\n    ampFreqSum += curFreq * ampSpectrum[i];\n  }\n\n  return (\n    (ampSpectrum.length * ampFreqSum - freqSum * ampSum) /\n    (ampSum * (powFreqSum - Math.pow(freqSum, 2)))\n  );\n}\n","import { mu } from \"./extractorUtilities\";\n\nexport default function ({\n  ampSpectrum,\n}: {\n  ampSpectrum: Float32Array;\n}): number {\n  if (typeof ampSpectrum !== \"object\") {\n    throw new TypeError();\n  }\n\n  return Math.sqrt(mu(2, ampSpectrum) - Math.pow(mu(1, ampSpectrum), 2));\n}\n","export default function ({ signal }: { signal: Float32Array }): number {\n  if (typeof signal !== \"object\") {\n    throw new TypeError();\n  }\n\n  var zcr = 0;\n  for (var i = 1; i < signal.length; i++) {\n    if (\n      (signal[i - 1] >= 0 && signal[i] < 0) ||\n      (signal[i - 1] < 0 && signal[i] >= 0)\n    ) {\n      zcr++;\n    }\n  }\n\n  return zcr;\n}\n","'use strict';\n\n// memoization of the reversal of different lengths.\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar memoizedReversal = {};\nvar memoizedZeroBuffers = {};\n\nvar constructComplexArray = function constructComplexArray(signal) {\n  var complexSignal = {};\n\n  complexSignal.real = signal.real === undefined ? signal.slice() : signal.real.slice();\n\n  var bufferSize = complexSignal.real.length;\n\n  if (memoizedZeroBuffers[bufferSize] === undefined) {\n    memoizedZeroBuffers[bufferSize] = Array.apply(null, Array(bufferSize)).map(Number.prototype.valueOf, 0);\n  }\n\n  complexSignal.imag = memoizedZeroBuffers[bufferSize].slice();\n\n  return complexSignal;\n};\n\nvar bitReverseArray = function bitReverseArray(N) {\n  if (memoizedReversal[N] === undefined) {\n    var maxBinaryLength = (N - 1).toString(2).length; //get the binary length of the largest index.\n    var templateBinary = '0'.repeat(maxBinaryLength); //create a template binary of that length.\n    var reversed = {};\n    for (var n = 0; n < N; n++) {\n      var currBinary = n.toString(2); //get binary value of current index.\n\n      //prepend zeros from template to current binary. This makes binary values of all indices have the same length.\n      currBinary = templateBinary.substr(currBinary.length) + currBinary;\n\n      currBinary = [].concat(_toConsumableArray(currBinary)).reverse().join(''); //reverse\n      reversed[n] = parseInt(currBinary, 2); //convert to decimal\n    }\n    memoizedReversal[N] = reversed; //save\n  }\n  return memoizedReversal[N];\n};\n\n// complex multiplication\nvar multiply = function multiply(a, b) {\n  return {\n    'real': a.real * b.real - a.imag * b.imag,\n    'imag': a.real * b.imag + a.imag * b.real\n  };\n};\n\n// complex addition\nvar add = function add(a, b) {\n  return {\n    'real': a.real + b.real,\n    'imag': a.imag + b.imag\n  };\n};\n\n// complex subtraction\nvar subtract = function subtract(a, b) {\n  return {\n    'real': a.real - b.real,\n    'imag': a.imag - b.imag\n  };\n};\n\n// euler's identity e^x = cos(x) + sin(x)\nvar euler = function euler(kn, N) {\n  var x = -2 * Math.PI * kn / N;\n  return { 'real': Math.cos(x), 'imag': Math.sin(x) };\n};\n\n// complex conjugate\nvar conj = function conj(a) {\n  a.imag *= -1;\n  return a;\n};\n\nmodule.exports = {\n  bitReverseArray: bitReverseArray,\n  multiply: multiply,\n  add: add,\n  subtract: subtract,\n  euler: euler,\n  conj: conj,\n  constructComplexArray: constructComplexArray\n};","'use strict';\n\nvar utils = require('./utils');\n\n// real to complex fft\nvar fft = function fft(signal) {\n\n  var complexSignal = {};\n\n  if (signal.real === undefined || signal.imag === undefined) {\n    complexSignal = utils.constructComplexArray(signal);\n  } else {\n    complexSignal.real = signal.real.slice();\n    complexSignal.imag = signal.imag.slice();\n  }\n\n  var N = complexSignal.real.length;\n  var logN = Math.log2(N);\n\n  if (Math.round(logN) != logN) throw new Error('Input size must be a power of 2.');\n\n  if (complexSignal.real.length != complexSignal.imag.length) {\n    throw new Error('Real and imaginary components must have the same length.');\n  }\n\n  var bitReversedIndices = utils.bitReverseArray(N);\n\n  // sort array\n  var ordered = {\n    'real': [],\n    'imag': []\n  };\n\n  for (var i = 0; i < N; i++) {\n    ordered.real[bitReversedIndices[i]] = complexSignal.real[i];\n    ordered.imag[bitReversedIndices[i]] = complexSignal.imag[i];\n  }\n\n  for (var _i = 0; _i < N; _i++) {\n    complexSignal.real[_i] = ordered.real[_i];\n    complexSignal.imag[_i] = ordered.imag[_i];\n  }\n  // iterate over the number of stages\n  for (var n = 1; n <= logN; n++) {\n    var currN = Math.pow(2, n);\n\n    // find twiddle factors\n    for (var k = 0; k < currN / 2; k++) {\n      var twiddle = utils.euler(k, currN);\n\n      // on each block of FT, implement the butterfly diagram\n      for (var m = 0; m < N / currN; m++) {\n        var currEvenIndex = currN * m + k;\n        var currOddIndex = currN * m + k + currN / 2;\n\n        var currEvenIndexSample = {\n          'real': complexSignal.real[currEvenIndex],\n          'imag': complexSignal.imag[currEvenIndex]\n        };\n        var currOddIndexSample = {\n          'real': complexSignal.real[currOddIndex],\n          'imag': complexSignal.imag[currOddIndex]\n        };\n\n        var odd = utils.multiply(twiddle, currOddIndexSample);\n\n        var subtractionResult = utils.subtract(currEvenIndexSample, odd);\n        complexSignal.real[currOddIndex] = subtractionResult.real;\n        complexSignal.imag[currOddIndex] = subtractionResult.imag;\n\n        var additionResult = utils.add(odd, currEvenIndexSample);\n        complexSignal.real[currEvenIndex] = additionResult.real;\n        complexSignal.imag[currEvenIndex] = additionResult.imag;\n      }\n    }\n  }\n\n  return complexSignal;\n};\n\n// complex to real ifft\nvar ifft = function ifft(signal) {\n\n  if (signal.real === undefined || signal.imag === undefined) {\n    throw new Error(\"IFFT only accepts a complex input.\");\n  }\n\n  var N = signal.real.length;\n\n  var complexSignal = {\n    'real': [],\n    'imag': []\n  };\n\n  //take complex conjugate in order to be able to use the regular FFT for IFFT\n  for (var i = 0; i < N; i++) {\n    var currentSample = {\n      'real': signal.real[i],\n      'imag': signal.imag[i]\n    };\n\n    var conjugateSample = utils.conj(currentSample);\n    complexSignal.real[i] = conjugateSample.real;\n    complexSignal.imag[i] = conjugateSample.imag;\n  }\n\n  //compute\n  var X = fft(complexSignal);\n\n  //normalize\n  complexSignal.real = X.real.map(function (val) {\n    return val / N;\n  });\n\n  complexSignal.imag = X.imag.map(function (val) {\n    return val / N;\n  });\n\n  return complexSignal;\n};\n\nmodule.exports = {\n  fft: fft,\n  ifft: ifft\n};","import * as utilities from \"./utilities\";\nimport * as featureExtractors from \"./featureExtractors\";\nimport type {\n  MeydaAudioFeature,\n  MeydaWindowingFunction,\n  MeydaFeaturesObject,\n} from \"./main\";\n\n/**\n * MeydaAnalyzerOptions\n */\nexport interface MeydaAnalyzerOptions {\n  /**\n   * The Audio Context for the MeydaAnalyzer to operate in.\n   */\n  audioContext: AudioContext;\n  /**\n   * The Audio Node for Meyda to listen to.\n   */\n  source: AudioNode;\n  /**\n   * The size of the buffer.\n   */\n  bufferSize: number;\n  /**\n   * The number of samples between the start of each buffer.\n   */\n  hopSize?: number | undefined;\n  /**\n   * The number of samples per second in the audioContext.\n   */\n  sampleRate?: number | undefined;\n  /**\n   * Pass `true` to start feature extraction immediately\n   */\n  startImmediately?: boolean | undefined;\n  /**\n   * The channel from the input node to listen to\n   */\n  channel?: number | undefined;\n  /**\n   * The Windowing Function to apply to the signal before transformation to the frequency domain.\n   */\n  windowingFunction?: MeydaWindowingFunction | undefined;\n  /**\n   * What feature extractors to return to the callback.\n   */\n  featureExtractors?:\n    | MeydaAudioFeature\n    | ReadonlyArray<MeydaAudioFeature>\n    | undefined;\n  inputs?: number | undefined;\n  outputs?: number | undefined;\n  /**\n   * The number of mfcc coefficients to calculate for each buffer.\n   */\n  numberOfMFCCCoefficients?: number | undefined;\n  /**\n   * The number of bark bands to calculate for use in feature extractors.\n   */\n  numberOfBarkBands?: number | undefined;\n  /**\n   * The callback to receive your audio features. Will be called once for each buffer of input audio.\n   */\n  callback?: ((features: Partial<MeydaFeaturesObject>) => void) | undefined;\n}\n\n/**\n * Meyda's interface to the Web Audio API. MeydaAnalyzer abstracts an API on\n * top of the Web Audio API's ScriptProcessorNode, running the Meyda audio\n * feature extractors inside that context.\n *\n * MeydaAnalyzer's constructor should not be called directly - MeydaAnalyzer\n * objects should be generated using the {@link createMeydaAnalyzer}\n * factory function in the main Meyda class.\n *\n * Options are of type {@link MeydaAnalyzerOptions}.\n *\n * @example\n * ```javascript\n * const analyzer = Meyda.createMeydaAnalyzer({\n *   \"audioContext\": audioContext,\n *   \"source\": source,\n *   \"bufferSize\": 512,\n *   \"featureExtractors\": [\"rms\"],\n *   \"inputs\": 2,\n *   \"numberOfMFCCCoefficients\": 20\n *   \"callback\": features => {\n *     levelRangeElement.value = features.rms;\n *   }\n * });\n * ```\n */\nexport class MeydaAnalyzer {\n  /** @hidden */\n  _m: any;\n\n  /** @hidden */\n  constructor(options: MeydaAnalyzerOptions, _this) {\n    this._m = _this;\n    if (!options.audioContext) {\n      throw this._m.errors.noAC;\n    } else if (\n      options.bufferSize &&\n      !utilities.isPowerOfTwo(options.bufferSize)\n    ) {\n      throw this._m._errors.notPow2;\n    } else if (!options.source) {\n      throw this._m._errors.noSource;\n    }\n\n    this._m.audioContext = options.audioContext;\n\n    // TODO: validate options\n    this._m.bufferSize = options.bufferSize || this._m.bufferSize || 256;\n    this._m.hopSize = options.hopSize || this._m.hopSize || this._m.bufferSize;\n    this._m.sampleRate =\n      options.sampleRate || this._m.audioContext.sampleRate || 44100;\n    this._m.callback = options.callback;\n    this._m.windowingFunction = options.windowingFunction || \"hanning\";\n    this._m.featureExtractors = featureExtractors;\n    this._m.EXTRACTION_STARTED = options.startImmediately || false;\n    this._m.channel = typeof options.channel === \"number\" ? options.channel : 0;\n    this._m.inputs = options.inputs || 1;\n    this._m.outputs = options.outputs || 1;\n    this._m.numberOfMFCCCoefficients =\n      options.numberOfMFCCCoefficients ||\n      this._m.numberOfMFCCCoefficients ||\n      13;\n    this._m.numberOfBarkBands =\n      options.numberOfBarkBands || this._m.numberOfBarkBands || 24;\n\n    //create nodes\n    this._m.spn = this._m.audioContext.createScriptProcessor(\n      this._m.bufferSize,\n      this._m.inputs,\n      this._m.outputs\n    );\n    this._m.spn.connect(this._m.audioContext.destination);\n\n    this._m._featuresToExtract = options.featureExtractors || [];\n\n    //always recalculate BS and MFB when a new Meyda analyzer is created.\n    this._m.barkScale = utilities.createBarkScale(\n      this._m.bufferSize,\n      this._m.sampleRate,\n      this._m.bufferSize\n    );\n    this._m.melFilterBank = utilities.createMelFilterBank(\n      Math.max(this._m.melBands, this._m.numberOfMFCCCoefficients),\n      this._m.sampleRate,\n      this._m.bufferSize\n    );\n\n    this._m.inputData = null;\n    this._m.previousInputData = null;\n\n    this._m.frame = null;\n    this._m.previousFrame = null;\n\n    this.setSource(options.source);\n\n    this._m.spn.onaudioprocess = (e) => {\n      var buffer;\n      if (this._m.inputData !== null) {\n        this._m.previousInputData = this._m.inputData;\n      }\n\n      this._m.inputData = e.inputBuffer.getChannelData(this._m.channel);\n\n      if (!this._m.previousInputData) {\n        buffer = this._m.inputData;\n      } else {\n        buffer = new Float32Array(\n          this._m.previousInputData.length +\n            this._m.inputData.length -\n            this._m.hopSize\n        );\n        buffer.set(this._m.previousInputData.slice(this._m.hopSize));\n        buffer.set(\n          this._m.inputData,\n          this._m.previousInputData.length - this._m.hopSize\n        );\n      }\n\n      var frames = utilities.frame(buffer, this._m.bufferSize, this._m.hopSize);\n\n      frames.forEach((f) => {\n        this._m.frame = f;\n\n        var features = this._m.extract(\n          this._m._featuresToExtract,\n          this._m.frame,\n          this._m.previousFrame\n        );\n\n        // call callback if applicable\n        if (\n          typeof this._m.callback === \"function\" &&\n          this._m.EXTRACTION_STARTED\n        ) {\n          this._m.callback(features);\n        }\n\n        this._m.previousFrame = this._m.frame;\n      });\n    };\n  }\n\n  /**\n   * Start feature extraction\n   * The audio features will be passed to the callback function that was defined\n   * in the MeydaOptions that were passed to the factory when constructing the\n   * MeydaAnalyzer.\n   * @param {(string|Array.<string>)} [features]\n   * Change the features that Meyda is extracting. Defaults to the features that\n   * were set upon construction in the options parameter.\n   * @example\n   * ```javascript\n   * analyzer.start('chroma');\n   * ```\n   */\n  start(features?: MeydaAudioFeature | ReadonlyArray<MeydaAudioFeature>): void {\n    this._m._featuresToExtract = features || this._m._featuresToExtract;\n    this._m.EXTRACTION_STARTED = true;\n  }\n\n  /**\n   * Stop feature extraction.\n   * @example\n   * ```javascript\n   * analyzer.stop();\n   * ```\n   */\n  stop(): void {\n    this._m.EXTRACTION_STARTED = false;\n  }\n\n  /**\n   * Set the Audio Node for Meyda to listen to.\n   * @param {AudioNode} source - The Audio Node for Meyda to listen to\n   * @example\n   * ```javascript\n   * analyzer.setSource(audioSourceNode);\n   * ```\n   */\n  setSource(source: AudioNode): void {\n    this._m.source && this._m.source.disconnect(this._m.spn);\n    this._m.source = source;\n    this._m.source.connect(this._m.spn);\n  }\n\n  /**\n   * Set the channel of the audio node for Meyda to listen to\n   * @param {number} channel - the index of the channel on the input audio node\n   * for Meyda to listen to.\n   * @example\n   * ```javascript\n   * analyzer.setChannel(0);\n   * ```\n   */\n  setChannel(channel: number) {\n    if (channel <= this._m.inputs) {\n      this._m.channel = channel;\n    } else {\n      console.error(\n        `Channel ${channel} does not exist. Make sure you've provided a value for 'inputs' that is greater than ${channel} when instantiating the MeydaAnalyzer`\n      );\n    }\n  }\n\n  /**\n   * Get a set of features from the current frame.\n   * @param {(string|Array.<string>)} [features]\n   * Change the features that Meyda is extracting\n   * @example\n   * ```javascript\n   * analyzer.get('spectralFlatness');\n   * ```\n   */\n  get(\n    features?: MeydaAudioFeature | ReadonlyArray<MeydaAudioFeature>\n  ): Partial<MeydaFeaturesObject> | null {\n    if (this._m.inputData) {\n      return this._m.extract(\n        features || this._m._featuresToExtract,\n        this._m.inputData,\n        this._m.previousInputData\n      );\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * This file contains the default export for Meyda, you probably want to check\n * out {@link default}\n *\n * @module Meyda\n */\n\nimport * as utilities from \"./utilities\";\nimport * as extractors from \"./featureExtractors\";\nimport { fft } from \"fftjs\";\nimport { MeydaAnalyzer, MeydaAnalyzerOptions } from \"./meyda-wa\";\nexport interface MeydaFeaturesObject {\n  amplitudeSpectrum: Float32Array;\n  buffer: number[];\n  chroma: number[];\n  complexSpectrum: {\n    real: number[];\n    imag: number[];\n  };\n  energy: number;\n  loudness: {\n    specific: Float32Array;\n    total: number;\n  };\n  mfcc: number[];\n  perceptualSharpness: number;\n  perceptualSpread: number;\n  powerSpectrum: Float32Array;\n  rms: number;\n  spectralCentroid: number;\n  spectralFlatness: number;\n  spectralKurtosis: number;\n  spectralRolloff: number;\n  spectralSkewness: number;\n  spectralSlope: number;\n  spectralSpread: number;\n  spectralCrest: number;\n  zcr: number;\n}\n\nexport type MeydaWindowingFunction =\n  | \"blackman\"\n  | \"sine\"\n  | \"hanning\"\n  | \"hamming\";\n\nexport type MeydaAudioFeature =\n  | \"amplitudeSpectrum\"\n  | \"chroma\"\n  | \"complexSpectrum\"\n  | \"energy\"\n  | \"loudness\"\n  | \"mfcc\"\n  | \"perceptualSharpness\"\n  | \"perceptualSpread\"\n  | \"powerSpectrum\"\n  | \"rms\"\n  | \"spectralCentroid\"\n  | \"spectralFlatness\"\n  | \"spectralFlux\"\n  | \"spectralKurtosis\"\n  | \"spectralRolloff\"\n  | \"spectralSkewness\"\n  | \"spectralSlope\"\n  | \"spectralSpread\"\n  | \"spectralCrest\"\n  | \"zcr\"\n  | \"buffer\"\n  | \"melBands\";\n\n/**\n * A type representing an audio signal. In general it should be an array of\n * numbers that is sliceable. Float32Array is assignable here, and we generally\n * expect that most signals will be in this format.\n */\nexport type MeydaSignal = SliceableArrayLike<number> | Float32Array;\n\nexport interface SliceableArrayLike<T> extends ArrayLike<T> {\n  slice(start: number, end: number): SliceableArrayLike<T>;\n}\n\n/**\n * Meyda is a library for extracting audio features from an audio signal.\n *\n * The primary entry points are {@link extract} for audio feature extraction on\n * raw signals you have in memory, and {@link createMeydaAnalyzer}, which\n * provides a {@link MeydaAnalyzer} object that can be used to extract features\n * on a Web Audio API AudioNode. The latter is only supported on web targets,\n * though if you're using the Web Audio API in a non-web target, we'd love to\n * hear from you.\n *\n * We also expose {@link listAvailableFeatureExtractors} which returns a list of the\n * available feature extractors, and {@link windowing}, which lets you apply\n * a windowing function to your signal outside of Meyda.\n *\n * We existed long before esmodules, so our backwards compatible API may seem\n * unusual. We export a default object, with read/write fields that control\n * various parameters of the audio feature extraction process. We're working on\n * a new interface, check out [#257](https://github.com/meyda/meyda/issues/257)\n * for more information.\n */\ninterface Meyda {\n  /**\n   * Meyda stores a reference to the relevant audio context here for use inside\n   * the Web Audio API.\n   */\n  audioContext: AudioContext | null;\n  /**\n   * Meyda keeps an internal ScriptProcessorNode in which it runs audio feature\n   * extraction. The ScriptProcessorNode is stored in this member variable.\n   * @hidden\n   */\n  spn: ScriptProcessorNode | null;\n  /**\n   * The length of each buffer that Meyda will extract audio on. When recieving\n   * input via the Web Audio API, the Script Processor Node chunks incoming audio\n   * into arrays of this length. Longer buffers allow for more precision in the\n   * frequency domain, but increase the amount of time it takes for Meyda to\n   * output a set of audio features for the buffer. You can calculate how many\n   * sets of audio features Meyda will output per second by dividing the\n   * buffer size by the sample rate. If you're using Meyda for visualisation,\n   * make sure that you're collecting audio features at a rate that's faster\n   * than or equal to the video frame rate you expect.\n   */\n  bufferSize: number;\n  /**\n   * The number of samples per second of the incoming audio. This affects\n   * feature extraction outside of the context of the Web Audio API, and must be\n   * set accurately - otherwise calculations will be off.\n   */\n  sampleRate: number;\n  /**\n   * The number of Mel bands to use in the Mel Frequency Cepstral Co-efficients\n   * feature extractor\n   */\n  melBands: number;\n  /**\n   * The number of bands to divide the spectrum into for the Chroma feature\n   * extractor. 12 is the standard number of semitones per octave in the western\n   * music tradition, but Meyda can use an arbitrary number of bands, which\n   * can be useful for microtonal music.\n   */\n  chromaBands: number;\n  /**\n   * A function you can provide that will be called for each buffer that Meyda\n   * receives from its source node\n   * @hidden\n   */\n  callback: ((features: Partial<MeydaFeaturesObject>) => void | null) | null;\n  /**\n   * Specify the windowing function to apply to the buffer before the\n   * transformation from the time domain to the frequency domain is performed\n   *\n   * The default windowing function is the hanning window.\n   */\n  windowingFunction: string;\n  featureExtractors: any;\n  /** @hidden */\n  EXTRACTION_STARTED: boolean;\n  /**\n   * The number of MFCC co-efficients that the MFCC feature extractor should return\n   */\n  numberOfMFCCCoefficients: number;\n  /**\n   * The number of bark bands that the loudness feature extractor should return\n   */\n  numberOfBarkBands: number;\n  /** @hidden */\n  _featuresToExtract: string[];\n  /**\n   * Apply a windowing function to a signal\n   */\n  windowing: (\n    signal: MeydaSignal,\n    windowname?: MeydaWindowingFunction\n  ) => MeydaSignal;\n  /** @hidden */\n  _errors: { [key: string]: Error };\n  /**\n   * @summary\n   * Create a MeydaAnalyzer\n   *\n   * A factory function for creating a MeydaAnalyzer, the interface for using\n   * Meyda in the context of Web Audio.\n   *\n   * @example\n   * ```javascript\n   * const analyzer = Meyda.createMeydaAnalyzer({\n   *   \"audioContext\": audioContext,\n   *   \"source\": source,\n   *   \"bufferSize\": 512,\n   *   \"featureExtractors\": [\"rms\"],\n   *   \"inputs\": 2,\n   *   \"callback\": features => {\n   *     levelRangeElement.value = features.rms;\n   *   }\n   * });\n   * ```\n   */\n  createMeydaAnalyzer: (MeydaAnalyzerOptions) => MeydaAnalyzer;\n  /**\n   * List available audio feature extractors. Return format provides the key to\n   * be used in selecting the extractor in the extract methods\n   */\n  listAvailableFeatureExtractors: () => MeydaAudioFeature[];\n  /**\n   * Extract an audio feature from a buffer\n   *\n   * Unless `meyda.windowingFunction` is set otherwise, `extract` will\n   * internally apply a hanning window to the buffer prior to conversion into\n   * the frequency domain.\n   *\n   * @param {(string|Array.<string>)} feature - the feature you want to extract\n   * @param {Array.<number>} signal\n   * An array of numbers that represents the signal. It should be of length\n   * `meyda.bufferSize`\n   * @param {Array.<number>} [previousSignal] - the previous buffer\n   * @returns {object} Features\n   * @example\n   * ```javascript\n   * meyda.bufferSize = 2048;\n   * const features = meyda.extract(['zcr', 'spectralCentroid'], signal);\n   * ```\n   *\n   * Aside: yes, you need to modify the value of a field of the default export\n   * of the package to change the buffer size. We realise this now seems not\n   * a good practice. See [this issue](https://github.com/meyda/meyda/issues/257)\n   * to track our progress on implementing a more modern API.\n   */\n  extract: (\n    feature: MeydaAudioFeature | MeydaAudioFeature[],\n    signal: MeydaSignal,\n    previousSignal?: MeydaSignal\n  ) => Partial<MeydaFeaturesObject> | null;\n}\n\nconst Meyda: Meyda = {\n  audioContext: null,\n  spn: null,\n  bufferSize: 512,\n  sampleRate: 44100,\n  melBands: 26,\n  chromaBands: 12,\n  callback: null,\n  windowingFunction: \"hanning\",\n  featureExtractors: extractors,\n  EXTRACTION_STARTED: false,\n  numberOfMFCCCoefficients: 13,\n  numberOfBarkBands: 24,\n  _featuresToExtract: [],\n  windowing: utilities.applyWindow,\n  /** @hidden */\n  _errors: {\n    notPow2: new Error(\n      \"Meyda: Buffer size must be a power of 2, e.g. 64 or 512\"\n    ),\n    featureUndef: new Error(\"Meyda: No features defined.\"),\n    invalidFeatureFmt: new Error(\"Meyda: Invalid feature format\"),\n    invalidInput: new Error(\"Meyda: Invalid input.\"),\n    noAC: new Error(\"Meyda: No AudioContext specified.\"),\n    noSource: new Error(\"Meyda: No source node specified.\"),\n  },\n\n  /**\n   * @summary\n   * Create a MeydaAnalyzer\n   *\n   * A factory function for creating a MeydaAnalyzer, the interface for using\n   * Meyda in the context of Web Audio.\n   *\n   * ```javascript\n   * const analyzer = Meyda.createMeydaAnalyzer({\n   *   \"audioContext\": audioContext,\n   *   \"source\": source,\n   *   \"bufferSize\": 512,\n   *   \"featureExtractors\": [\"rms\"],\n   *   \"inputs\": 2,\n   *   \"callback\": features => {\n   *     levelRangeElement.value = features.rms;\n   *   }\n   * });\n   * ```\n   */\n  createMeydaAnalyzer,\n  /**\n   * List available audio feature extractors. Return format provides the key to\n   * be used in selecting the extractor in the extract methods\n   */\n  listAvailableFeatureExtractors,\n  /**\n   * Extract an audio feature from a buffer\n   *\n   * Unless `meyda.windowingFunction` is set otherwise, `extract` will\n   * internally apply a hanning window to the buffer prior to conversion into\n   * the frequency domain.\n   *\n   * ```javascript\n   * meyda.bufferSize = 2048;\n   * const features = meyda.extract(['zcr', 'spectralCentroid'], signal);\n   * ```\n   */\n  extract: function (feature, signal, previousSignal) {\n    if (!signal) throw this._errors.invalidInput;\n    else if (typeof signal != \"object\") throw this._errors.invalidInput;\n    else if (!feature) throw this._errors.featureUndef;\n    else if (!utilities.isPowerOfTwo(signal.length)) throw this._errors.notPow2;\n\n    if (\n      typeof this.barkScale == \"undefined\" ||\n      this.barkScale.length != this.bufferSize\n    ) {\n      this.barkScale = utilities.createBarkScale(\n        this.bufferSize,\n        this.sampleRate,\n        this.bufferSize\n      );\n    }\n\n    // Recalculate mel bank if buffer length changed\n    if (\n      typeof this.melFilterBank == \"undefined\" ||\n      this.barkScale.length != this.bufferSize ||\n      this.melFilterBank.length != this.melBands\n    ) {\n      this.melFilterBank = utilities.createMelFilterBank(\n        Math.max(this.melBands, this.numberOfMFCCCoefficients),\n        this.sampleRate,\n        this.bufferSize\n      );\n    }\n\n    // Recalculate chroma bank if buffer length changed\n    if (\n      typeof this.chromaFilterBank == \"undefined\" ||\n      this.chromaFilterBank.length != this.chromaBands\n    ) {\n      this.chromaFilterBank = utilities.createChromaFilterBank(\n        this.chromaBands,\n        this.sampleRate,\n        this.bufferSize\n      );\n    }\n\n    if (\"buffer\" in signal && typeof signal.buffer == \"undefined\") {\n      //signal is a normal array, convert to F32A\n      this.signal = utilities.arrayToTyped(signal);\n    } else {\n      this.signal = signal;\n    }\n\n    let preparedSignal = prepareSignalWithSpectrum(\n      signal,\n      this.windowingFunction,\n      this.bufferSize\n    );\n\n    this.signal = preparedSignal.windowedSignal;\n    this.complexSpectrum = preparedSignal.complexSpectrum;\n    this.ampSpectrum = preparedSignal.ampSpectrum;\n\n    if (previousSignal) {\n      let preparedSignal = prepareSignalWithSpectrum(\n        previousSignal,\n        this.windowingFunction,\n        this.bufferSize\n      );\n\n      this.previousSignal = preparedSignal.windowedSignal;\n      this.previousComplexSpectrum = preparedSignal.complexSpectrum;\n      this.previousAmpSpectrum = preparedSignal.ampSpectrum;\n    }\n\n    const extract = (feature) => {\n      return this.featureExtractors[feature]({\n        ampSpectrum: this.ampSpectrum,\n        chromaFilterBank: this.chromaFilterBank,\n        complexSpectrum: this.complexSpectrum,\n        signal: this.signal,\n        bufferSize: this.bufferSize,\n        sampleRate: this.sampleRate,\n        barkScale: this.barkScale,\n        melFilterBank: this.melFilterBank,\n        previousSignal: this.previousSignal,\n        previousAmpSpectrum: this.previousAmpSpectrum,\n        previousComplexSpectrum: this.previousComplexSpectrum,\n        numberOfMFCCCoefficients: this.numberOfMFCCCoefficients,\n        numberOfBarkBands: this.numberOfBarkBands,\n      });\n    };\n\n    if (typeof feature === \"object\") {\n      return feature.reduce(\n        (acc, el) =>\n          Object.assign({}, acc, {\n            [el]: extract(el),\n          }),\n        {}\n      );\n    } else if (typeof feature === \"string\") {\n      return extract(feature);\n    } else {\n      throw this._errors.invalidFeatureFmt;\n    }\n  },\n};\n\nvar prepareSignalWithSpectrum = function (\n  signal,\n  windowingFunction,\n  bufferSize\n) {\n  var preparedSignal: any = {};\n\n  if (typeof signal.buffer == \"undefined\") {\n    //signal is a normal array, convert to F32A\n    preparedSignal.signal = utilities.arrayToTyped(signal);\n  } else {\n    preparedSignal.signal = signal;\n  }\n\n  preparedSignal.windowedSignal = utilities.applyWindow(\n    preparedSignal.signal,\n    windowingFunction\n  );\n\n  preparedSignal.complexSpectrum = fft(preparedSignal.windowedSignal);\n  preparedSignal.ampSpectrum = new Float32Array(bufferSize / 2);\n  for (var i = 0; i < bufferSize / 2; i++) {\n    preparedSignal.ampSpectrum[i] = Math.sqrt(\n      Math.pow(preparedSignal.complexSpectrum.real[i], 2) +\n        Math.pow(preparedSignal.complexSpectrum.imag[i], 2)\n    );\n  }\n\n  return preparedSignal;\n};\n\nexport default Meyda;\n\n/**\n * List available audio feature extractors. Return format provides the key to\n * be used in selecting the extractor in the extract methods\n */\nfunction listAvailableFeatureExtractors(): MeydaAudioFeature[] {\n  return Object.keys(this.featureExtractors) as MeydaAudioFeature[];\n}\n\n/**\n * Create a MeydaAnalyzer\n *\n * A factory function for creating a MeydaAnalyzer, the interface for using\n * Meyda in the context of Web Audio.\n *\n * ```javascript\n * const analyzer = Meyda.createMeydaAnalyzer({\n *   \"audioContext\": audioContext,\n *   \"source\": source,\n *   \"bufferSize\": 512,\n *   \"featureExtractors\": [\"rms\"],\n *   \"inputs\": 2,\n *   \"callback\": features => {\n *     levelRangeElement.value = features.rms;\n *   }\n * });\n * ```\n */\nfunction createMeydaAnalyzer(options) {\n  return new MeydaAnalyzer(options, Object.assign({}, Meyda));\n}\n\n/**\n * Apply a windowing function to a signal\n */\nfunction windowing(\n  signal: MeydaSignal,\n  windowname: MeydaWindowingFunction\n): MeydaSignal {\n  return utilities.applyWindow(signal, windowname);\n}\n\n// @ts-ignore\nif (typeof window !== \"undefined\") window.Meyda = Meyda;\n"],"names":["__spreadArray","to","from","pack","arguments","length","ar","i","l","Array","prototype","slice","call","concat","size","blackmanBuffer","Float32Array","coeff1","Math","PI","coeff2","cos","ceil","hammingBuffer","hanningBuffer","coeff","sineBuffer","sin","windows","isPowerOfTwo","num","applyWindow","signal","windowname","windowing","e","Error","a","b","c","min","pointwiseBufferMult","createBarkScale","sampleRate","bufferSize","barkScale","atan","pow","arrayToTyped","t","_freqToMel","freqValue","log","createMelFilterBank","numFilters","melValue","melValues","melValuesInFreq","upperLimitFreq","lowerLimitMel","valueToAdd","fftBinsOfFreq","exp","floor","filterBank","j","fill","createChromaFilterBank","centerOctave","octaveWidth","baseC","A440","numOutputBins","frequencyBins","map","_","freq","log2","hzToOctaves","emptyRow","colDenominators","binWidthBins","v","max","halfNumFilters","round","filterPeaks","frq","weights","row","reduce","acc","forEach","cell","sqrt","octaveWeights","mu","amplitudeSpect","numerator","denominator","k","abs","loudness","_a","ampSpectrum","_b","numberOfBarkBands","TypeError","NUM_BARK_BANDS","specific","total","normalisedSpectrum","bbLimits","Int32Array","currentBandEnd","currentBand","sum","extractPowerSpectrum","powerSpectrum","extractMelBands","melFilterBank","powSpec","filtered","loggedMelBands","cosMap","scale","L","N","PI_N","n","memoizeCosines","__","ix","prev","cur","ix_","arr","args","chromaFilterBank","chromagram","maxVal","complexSpectrum","energy","numberOfMFCCCoefficients","_numberOfMFCCCoefficients","loggedMelBandsArray","dct","loudnessValue","spec","output","rms","peak","Infinity","x","previousSignal","sf","ampspec","mu1","mu2","mu3","mu4","nyqBin","ec","threshold","ampSum","freqSum","freqs","powFreqSum","ampFreqSum","curFreq","zcr","_toConsumableArray","isArray","arr2","memoizedReversal","memoizedZeroBuffers","utils","bitReverseArray","undefined","maxBinaryLength","toString","templateBinary","repeat","reversed","currBinary","substr","reverse","join","parseInt","multiply","real","imag","add","subtract","euler","kn","conj","constructComplexArray","complexSignal","apply","Number","valueOf","fft","logN","bitReversedIndices","ordered","_i","currN","twiddle","m","currEvenIndex","currOddIndex","currEvenIndexSample","currOddIndexSample","odd","subtractionResult","additionResult","fft_1","MeydaAnalyzer","options","_this","_this_1","this","_m","audioContext","errors","noAC","utilities.isPowerOfTwo","_errors","notPow2","source","noSource","hopSize","callback","windowingFunction","featureExtractors","EXTRACTION_STARTED","startImmediately","channel","inputs","outputs","spn","createScriptProcessor","connect","destination","_featuresToExtract","utilities.createBarkScale","utilities.createMelFilterBank","melBands","inputData","previousInputData","frame","previousFrame","setSource","onaudioprocess","buffer","inputBuffer","getChannelData","set","frames","frameLength","hopLength","numFrames","utilities.frame","f","features","extract","start","stop","disconnect","setChannel","console","error","get","Meyda","chromaBands","extractors","utilities.applyWindow","featureUndef","invalidFeatureFmt","invalidInput","createMeydaAnalyzer","Object","assign","listAvailableFeatureExtractors","keys","feature","utilities.createChromaFilterBank","utilities.arrayToTyped","preparedSignal","prepareSignalWithSpectrum","windowedSignal","preparedSignal_1","previousComplexSpectrum","previousAmpSpectrum","el","window"],"mappings":"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","x_google_ignoreList":[0,7,25,26]}